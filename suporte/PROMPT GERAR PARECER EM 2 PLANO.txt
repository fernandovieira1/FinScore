PROMPT GERAR PARECER EM SEGUNDO PLANO
----------------------------------------

n√£o fa√ßa nada, apenas me responda se:

* Seria poss√≠vel deixar a gera√ß√£o do parecer com IA (em /Parecer >>> bot√£o 'Gerar Parecer IA') rodando em segundo plano a partir do momento em que eu calculo o finscore (em /Lan√ßamentos >>> bot√£o 'Calcular FinScore')

Se sim:

* A op√ßao de clicar no bot√µa 'Gerar Parecer IA' em /Parecer cotinuaria dispon√≠vel e, se o processamento ainda n√£o tivesse terminado, ele n√£o fosse reiniciado e continuasse normalmente at√© gerar o parecer final.

Repito: n√£o fa√ßa nada, apenas me diga se e como isso seria poss√≠vel e funcionaria


***************** /// *****************
Implemente a gera√ß√£o autom√°tica do Parecer IA em background quando o FinScore for calculado.

REQUISITOS:

1. **Refatora√ß√£o da infraestrutura de background tasks:**
   - Mova as fun√ß√µes de gerenciamento de tasks de `analise.py` para um novo arquivo `services/background_tasks.py`:
     - `_get_review_tasks()`
     - `_call_review_llm_with_throttle()`
     - `_ensure_insight_polling()`
     - `_start_review_task()` (se existir)
     - Todas as constantes relacionadas (_REVIEW_EXECUTOR, _LLM_CALL_LOCK, etc.)
   - Atualize os imports em `analise.py` para usar o novo m√≥dulo

2. **Trigger autom√°tico em /Lan√ßamentos:**
   - No arquivo onde o bot√£o "Calcular FinScore" est√° implementado
   - Ap√≥s o c√°lculo bem-sucedido do FinScore (quando `ss.out` √© populado)
   - Inicie automaticamente a tarefa de gera√ß√£o do parecer:
     ```python
     from services.background_tasks import start_review_task
     
     # Construir payload com dados necess√°rios para o parecer
     payload = {
         "meta": ss.meta,
         "out": ss.out,
         "df_indices": ss.df_indices,  # se dispon√≠vel
         # outros dados necess√°rios
     }
     start_review_task("parecer_ia", payload)
     ```
   - Mostrar feedback discreto ao usu√°rio: "‚úÖ FinScore calculado! Parecer IA sendo gerado em segundo plano..."

3. **Adapta√ß√£o da view /Parecer:**
   - Verificar se j√° existe uma tarefa "parecer_ia" rodando ou conclu√≠da
   - L√≥gica do bot√£o "Gerar Parecer IA":
     ```python
     task = get_review_tasks().get("parecer_ia")
     
     if task and task["status"] in ("pending", "running"):
         st.info("‚è≥ Parecer sendo gerado em segundo plano...")
         render_task_progress(task)
         ensure_insight_polling()  # manter polling ativo
     elif task and task["status"] == "done":
         render_review_result(task)
         # Bot√£o opcional para regerar
         if st.button("üîÑ Gerar Novo Parecer"):
             # limpar tarefa anterior e reiniciar
     else:
         if st.button("Gerar Parecer IA"):
             # construir payload e iniciar tarefa
             start_review_task("parecer_ia", payload)
     ```

4. **Garantias de funcionamento:**
   - Prote√ß√£o contra m√∫ltiplas chamadas simult√¢neas (usar task ID "parecer_ia" √∫nico)
   - Manter throttling e rate limiting j√° existentes
   - Sistema de polling para atualiza√ß√£o autom√°tica em todas as views
   - Persist√™ncia do resultado no session_state at√© nova an√°lise

5. **Melhorias de UX:**
   - Indicador visual no menu lateral quando parecer est√° sendo gerado
   - Badge ou √≠cone na aba "Parecer" indicando status (processando/pronto)
   - Preservar resultado do parecer mesmo ao navegar entre abas

IMPORTANTE:
- N√£o duplicar c√≥digo: reutilizar infraestrutura existente de `analise.py`
- Manter compatibilidade: bot√£o manual em /Parecer continua funcionando
- Testar: calcular FinScore ‚Üí navegar para /Parecer ‚Üí verificar que n√£o reinicia se j√° estiver rodando

***************** /// *****************

