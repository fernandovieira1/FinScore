"""
Script de teste r√°pido para validar engines de PDF e gera√ß√£o de pareceres.
Testa tanto xhtml2pdf quanto Playwright (se dispon√≠vel).
"""

import sys
from pathlib import Path

# Adicionar app_front ao path
app_front = Path(__file__).parent.parent
sys.path.insert(0, str(app_front))


def test_imports():
    """Testa se as depend√™ncias est√£o instaladas"""
    print("üîç Testando importa√ß√µes...")
    
    try:
        from xhtml2pdf import pisa
        print("‚úÖ xhtml2pdf importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar xhtml2pdf: {e}")
        return False
    
    try:
        import markdown_it
        print("‚úÖ markdown_it importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar markdown_it: {e}")
        return False
    
    # Playwright √© opcional
    try:
        from playwright.async_api import async_playwright
        print("‚úÖ playwright importado com sucesso (opcional)")
    except ImportError:
        print("‚ö†Ô∏è  playwright n√£o dispon√≠vel (opcional - s√≥ funciona em Linux/Mac)")
    
    return True


def test_pdf_module():
    """Testa se o m√≥dulo PDF funciona"""
    print("\nüîç Testando m√≥dulo PDF...")
    
    try:
        from pdf.export_pdf import gerar_pdf_parecer, get_engine_info, get_available_engines
        print("‚úÖ M√≥dulo pdf.export_pdf importado com sucesso")
        
        # Mostrar informa√ß√µes dos engines
        info = get_engine_info()
        print(f"\nüìä Informa√ß√µes do sistema:")
        print(f"   Plataforma: {info['platform']}")
        print(f"   Engine padr√£o: {info['default_engine']}")
        print(f"   Playwright dispon√≠vel: {info['playwright_available']}")
        print(f"   xhtml2pdf dispon√≠vel: {info['xhtml2pdf_available']}")
        print(f"   Engines dispon√≠veis: {info['available_engines']}")
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar pdf.export_pdf: {e}")
        return False
    
    return True


def test_pdf_generation(engine='xhtml2pdf'):
    """Testa gera√ß√£o de PDF com engine espec√≠fico"""
    print(f"\nüîç Testando gera√ß√£o de PDF com {engine}...")
    
    try:
        from pdf.export_pdf import gerar_pdf_parecer
        
        # Conte√∫do de teste
        conteudo_teste = f"""
# Parecer de Cr√©dito - TESTE

## 1. Informa√ß√µes Gerais
Este √© um teste de gera√ß√£o de PDF com **{engine}**.

## 2. An√°lise Financeira
Teste de formata√ß√£o com:
- **Negrito**
- *It√°lico*
- `C√≥digo`

### 2.1 Indicadores
| Indicador | Valor | Classifica√ß√£o |
|-----------|-------|---------------|
| FinScore  | 725.5 | M√©dio-Alto    |
| Serasa    | 650   | M√©dio         |

## 3. Decis√£o
**APROVAR COM RESSALVAS**

## 4. Considera√ß√µes Finais
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.

### 4.1 Recomenda√ß√µes
1. Monitorar fluxo de caixa
2. Revisar garantias
3. Estabelecer covenants

## 5. Conclus√£o
Parecer favor√°vel com ressalvas t√©cnicas mencionadas.
"""
        
        meta_teste = {
            "empresa": "EMPRESA TESTE LTDA",
            "cnpj": "00.000.000/0001-00",
            "data_analise": "01/10/2025",
            "finscore_ajustado": "725.50",
            "classificacao_finscore": "M√©dio-Alto",
            "serasa_score": "650",
            "classificacao_serasa": "M√©dio",
            "decisao": "aprovar_com_ressalvas"
        }
        
        print(f"‚è≥ Gerando PDF com {engine}...")
        pdf_bytes = gerar_pdf_parecer(
            conteudo_teste, 
            meta_teste, 
            is_markdown=True,
            engine=engine
        )
        
        print(f"‚úÖ PDF gerado! Tamanho: {len(pdf_bytes)} bytes")
        
        # Salvar arquivo de teste
        output_path = Path(__file__).parent / f"teste_output_{engine}.pdf"
        output_path.write_bytes(pdf_bytes)
        print(f"‚úÖ PDF salvo em: {output_path}")
        
        return True
        
    except Exception as e:
        import traceback
        print(f"‚ùå Erro ao gerar PDF com {engine}: {e}")
        print("\nüìã Traceback completo:")
        print(traceback.format_exc())
        return False


if __name__ == "__main__":
    print("=" * 60)
    print("üß™ TESTE DE M√ìDULO PDF - MULTI-ENGINE")
    print("=" * 60)
    
    # Teste 1: Importa√ß√µes
    if not test_imports():
        print("\n‚ùå Falha no teste de importa√ß√µes. Instale as depend√™ncias:")
        print("   pip install xhtml2pdf markdown-it-py")
        print("   pip install playwright && playwright install chromium  # opcional")
        sys.exit(1)
    
    # Teste 2: M√≥dulo PDF
    if not test_pdf_module():
        print("\n‚ùå Falha ao importar m√≥dulo PDF")
        sys.exit(1)
    
    # Teste 3: Gera√ß√£o de PDF com engines dispon√≠veis
    from pdf.export_pdf import get_available_engines
    
    engines = get_available_engines()
    all_passed = True
    
    for engine in engines:
        if not test_pdf_generation(engine):
            print(f"\n‚ö†Ô∏è  Falha no teste com {engine}")
            all_passed = False
        else:
            print(f"\n‚úÖ Teste com {engine} passou!")
    
    print("\n" + "=" * 60)
    if all_passed:
        print("‚úÖ TODOS OS TESTES PASSARAM!")
    else:
        print("‚ö†Ô∏è  ALGUNS TESTES FALHARAM")
    print("=" * 60)
    
    sys.exit(0 if all_passed else 1)
