"""
Script de teste r√°pido para validar a instala√ß√£o do Playwright e gera√ß√£o de PDF.
"""

import sys
from pathlib import Path

# Adicionar app_front ao path
app_front = Path(__file__).parent.parent
sys.path.insert(0, str(app_front))

def test_imports():
    """Testa se todas as depend√™ncias est√£o instaladas"""
    print("üîç Testando importa√ß√µes...")
    
    try:
        from xhtml2pdf import pisa
        print("‚úÖ xhtml2pdf importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar xhtml2pdf: {e}")
        return False
    
    try:
        import markdown_it
        print("‚úÖ markdown_it importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar markdown_it: {e}")
        return False
    
    return True


def test_pdf_module():
    """Testa se o m√≥dulo PDF funciona"""
    print("\nüîç Testando m√≥dulo PDF...")
    
    try:
        from pdf.export_pdf import gerar_pdf_parecer
        print("‚úÖ M√≥dulo pdf.export_pdf importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar pdf.export_pdf: {e}")
        return False
    
    return True


def test_pdf_generation():
    """Testa gera√ß√£o de PDF simples"""
    print("\nüîç Testando gera√ß√£o de PDF...")
    
    try:
        from pdf.export_pdf import gerar_pdf_parecer
        
        # Conte√∫do de teste
        conteudo_teste = """
# Parecer de Cr√©dito - TESTE

## 1. Informa√ß√µes Gerais
Este √© um teste de gera√ß√£o de PDF.

## 2. An√°lise
Teste de formata√ß√£o com **negrito** e *it√°lico*.

### 2.1 Subse√ß√£o
- Item 1
- Item 2
- Item 3

## 3. Conclus√£o
PDF gerado com sucesso!
"""
        
        meta_teste = {
            "empresa": "EMPRESA TESTE LTDA",
            "cnpj": "00.000.000/0001-00",
            "data_analise": "01/10/2025",
            "finscore_ajustado": "725.50",
            "classificacao_finscore": "M√©dio-Alto",
            "serasa_score": "650",
            "classificacao_serasa": "M√©dio",
            "decisao": "aprovar_com_ressalvas"
        }
        
        print("‚è≥ Gerando PDF de teste...")
        pdf_bytes = gerar_pdf_parecer(conteudo_teste, meta_teste, is_markdown=True)
        
        print(f"‚úÖ PDF gerado! Tamanho: {len(pdf_bytes)} bytes")
        
        # Salvar arquivo de teste
        output_path = Path(__file__).parent / "teste_output.pdf"
        output_path.write_bytes(pdf_bytes)
        print(f"‚úÖ PDF salvo em: {output_path}")
        
        return True
        
    except Exception as e:
        import traceback
        print(f"‚ùå Erro ao gerar PDF: {e}")
        print("\nüìã Traceback completo:")
        print(traceback.format_exc())
        return False


if __name__ == "__main__":
    print("=" * 60)
    print("üß™ TESTE DE M√ìDULO PDF")
    print("=" * 60)
    
    # Teste 1: Importa√ß√µes
    if not test_imports():
        print("\n‚ùå Falha no teste de importa√ß√µes. Instale as depend√™ncias:")
        print("   pip install xhtml2pdf markdown-it-py")
        sys.exit(1)
    
    # Teste 2: M√≥dulo PDF
    if not test_pdf_module():
        print("\n‚ùå Falha ao importar m√≥dulo PDF")
        sys.exit(1)
    
    # Teste 3: Gera√ß√£o de PDF
    if not test_pdf_generation():
        print("\n‚ùå Falha ao gerar PDF")
        sys.exit(1)
    
    print("\n" + "=" * 60)
    print("‚úÖ TODOS OS TESTES PASSARAM!")
    print("=" * 60)
