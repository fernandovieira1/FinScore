# app_front/views/sobre.py
import streamlit as st

# r√≥tulos com √≠cones
TAB_LABELS = ["üß≠ Metodologia", "üìö Gloss√°rio", "‚ùì FAQ"]

def _sec_metodologia():
    import os, pandas as pd
    from pathlib import Path

    st.subheader("FinScore")

    # caminho robusto para os assets (independente de onde o app √© executado)
    ASSETS_PATH = Path(__file__).resolve().parents[1] / "assets"

    # 1) O que √© o FinScore
    st.markdown("""
    O FinScore transforma as demonstra√ß√µes cont√°beis da empresa em um n√∫mero √∫nico (0 a 1000) que resume sua sa√∫de econ√¥mico-financeira e risco de cr√©dito.

Ele combina tr√™s elementos:

- √çndices financeiros cl√°ssicos ‚Äî como liquidez, rentabilidade e endividamento.

- T√©cnicas estat√≠sticas ‚Äî que colocam todos os √≠ndices na mesma escala e evidenciam os que mais pesam no risco.

- Pondera√ß√£o temporal ‚Äî que valoriza o desempenho mais recente (60% do peso), mas sem perder a vis√£o do hist√≥rico (25% e 15%).

Em outras palavras, o FinScore funciona como um term√¥metro de risco: quanto mais alto, menor a probabilidade percebida de problemas financeiros.
    """)

    # 2) Fluxo visual do c√°lculo
    st.markdown("#### Metodologia")

    st.markdown("""
    O **FinScore** transforma dados cont√°beis das **tr√™s demonstra√ß√µes cont√°beis** mais recentes da empresa em um **n√∫mero √∫nico (0‚Äì1000)** 
    que resume sua sa√∫de econ√¥mico-financeira e risco de cr√©dito. O c√°lculo combina tr√™s etapas principais: 
    1) √≠ndices financeiros cl√°ssicos, 2) t√©cnicas estat√≠sticas e 3) pondera√ß√£o temporal.
                
    O ponto de partida do FinScore s√£o indicadores extra√≠dos da contabilidade que permitem avaliar 
    diferentes dimens√µes da empresa.

    - **Liquidez** (Liquidez Corrente, Liquidez Seca, CCL/Ativo): mede a capacidade de honrar 
      compromissos de curto prazo e sinaliza a folga de caixa.
    - **Rentabilidade** (Margem L√≠quida, ROA, ROE, Margem EBITDA): indica a efici√™ncia em transformar 
      receita em lucro e o retorno obtido pelos ativos e pelo capital pr√≥prio.
    - **Endividamento/Alavancagem** (D√≠vida/Ativo, D√≠vida L√≠quida/EBITDA, Cobertura de Juros): mostra 
      o grau de depend√™ncia de recursos de terceiros e a capacidade operacional de sustentar o servi√ßo da d√≠vida.
    - **Efici√™ncia Operacional** (Giro do Ativo, PMR, PMP): avalia a velocidade do ciclo financeiro e o uso dos ativos para gerar receita.

    Esses √≠ndices n√£o s√£o avaliados de forma isolada: o FinScore relaciona sinais distintos, destacando 
    combina√ß√µes que revelam pontos fortes e fragilidades. Para tornar os indicadores compar√°veis e extrair padr√µes relevantes, 
    o FinScore padroniza e reduz a dimensionalidade dos dados, com vistas a otimizar a an√°lise.

    - **A padroniza√ß√£o (z-score)** converte todos os √≠ndices para uma escala comum (m√©dia zero, desvio-padr√£o um), 
      permitindo compara√ß√µes equilibradas.
    
    - J√° a **an√°lise de componentes principais (PCA)** resume grupos de vari√°veis correlacionadas em fatores que n√£o se sobrep√µem, 
      facilitando a interpreta√ß√£o dos dados, o que √© crucial para um modelo de risco. Isto √© computado com base em:
        
        - Cargas (loadings): coeficientes que mostram o quanto cada √≠ndice influencia cada fator, ajudando a entender quais vari√°veis mais afetam o risco.
        As cargas (loadings) representam o grau de influ√™ncia de cada vari√°vel original sobre os fatores extra√≠dos, ou seja: valores mais altos 
        indicam maior contribui√ß√£o daquela vari√°vel para o fator;

        - Vari√¢ncia explicada: indica o quanto cada fator consegue representar dos dados originais; quanto maior essa vari√¢ncia, mais relevante √© o fator na composi√ß√£o do escore.

    Esse processo reduz a complexidade: em vez de acompanhar uma lista extensa de √≠ndices, o FinScore trabalha com poucos fatores que concentram 
    a ess√™ncia das informa√ß√µes.
                """)

    fluxograma = ASSETS_PATH / "finscore_pipeline.png"
    if fluxograma.exists():
        st.image(str(fluxograma), use_column_width=True)
    else:
        st.info("Fluxograma n√£o encontrado em assets. Esperado: `finscore_pipeline.png`.")

    st.markdown("""
    O modelo tamb√©m incorpora a evolu√ß√£o no tempo, considerando at√© tr√™s exerc√≠cios consecutivos, 
    com pesos diferenciados:

    - **Ano mais recente (t): 60%**
    - **Ano anterior (t‚àí1): 25%**
    - **Dois anos antes (t‚àí2): 15%**

    Essa pondera√ß√£o valoriza o desempenho atual sem desconsiderar a trajet√≥ria. Resultados recentes 
    t√™m maior influ√™ncia, mas ainda moderados pelo hist√≥rico. O escore final √© convertido para a escala 
    de **0 a 1000** e classificado em faixas de risco, o que facilita a leitura e a comunica√ß√£o em 
    decis√µes de cr√©dito.
    """)

    # 3) √çndices considerados (tabela)
    st.markdown("#### √çndices utilizados")
    tabela_csv = ASSETS_PATH / "finscore_indices_formulas.csv"
    if tabela_csv.exists():
        df = pd.read_csv(tabela_csv)
        st.table(df)
        st.download_button(
            "Baixar tabela de √≠ndices (CSV)",
            data=tabela_csv.read_bytes(),
            file_name="finscore_indices_formulas.csv",
            mime="text/csv",
        )
    else:
        st.info("Tabela de √≠ndices n√£o encontrada em assets. Esperado: `finscore_indices_formulas.csv`.")

def _sec_glossario():
    st.subheader("Gloss√°rio")
    st.write("Esta √© a p√°gina de gloss√°rio.")
    # TODO: conte√∫do do gloss√°rio

def _sec_faq():
    st.subheader("FAQ")
    st.write("Esta √© a p√°gina de FAQ.")
    # TODO: perguntas e respostas

def render():
    st.header("Sobre")

    # abas internas
    tab_met, tab_glos, tab_faq = st.tabs(TAB_LABELS)

    with tab_met:
        _sec_metodologia()

    with tab_glos:
        _sec_glossario()

    with tab_faq:
        _sec_faq()
